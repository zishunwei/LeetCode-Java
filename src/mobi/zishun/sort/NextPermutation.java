package mobi.zishun.sort;

import java.util.Arrays;

/*
 * 31. 下一个排列
* 整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。
* 例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。
* 整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。
* 更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。
* 如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。
例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。
类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。
而 arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。
给你一个整数数组 nums ，找出 nums 的下一个排列。
必须 原地 修改，只允许使用额外常数空间。

示例 1：
输入：nums = [1,2,3]
输出：[1,3,2]
示例 2：
输入：nums = [3,2,1]
输出：[1,2,3]
示例 3：
输入：nums = [1,1,5]
输出：[1,5,1]
提示：
1 <= nums.length <= 100
0 <= nums[i] <= 100
 */
public class NextPermutation {
    // 注意到下一个排列总是比当前排列要大，除非该排列已经是最大的排列。
    // 我们希望找到一种方法，能够找到一个大于当前序列的新序列，且变大的幅度尽可能小。具体地：

    // 我们需要将一个左边的「较小数」与一个右边的「较大数」交换，以能够让当前排列变大，从而得到下一个排列。
    // 同时我们要让这个「较小数」尽量靠右，而「较大数」尽可能小。当交换完成后，「较大数」右边的数需要按照升序重新排列。
    // 这样可以在保证新排列大于原来排列的情况下，使变大的幅度尽可能小。
    public void nextPermutation(int[] nums) {
        int n = nums.length;
        int i = n - 1;
        //如果i的左边比它大，则左移
        while (i > 0 && nums[i] <= nums[i - 1]) {
            i--;
        }
        // 如果i为0，说明数组从后到前是递增（654321）的,没有更大的了
        // 直接重排序变成一个递减的（123456）符合题意
        if (i == 0) {
            Arrays.sort(nums);
            return;
        }
        // 循环终止在nums[i] > nums[i - 1] （i指向最右的较小数）
        // 对nums[i]及后面的数组排序，从小到大
        Arrays.sort(nums, i, n);
        // 遍历i及之后的数（已排序，找到最左的（即最小的）并且大于nums[i-1]的数字）
        for (int j = i; j < n; j++) {
            if (nums[j] > nums[i - 1]) {
                swap(nums, i - 1, j);
                return;
            }
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

}
